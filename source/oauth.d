module source.oauth;

import std.stdio;
import source.oauth_utils;
import source.tests;
import std.digest.md;
import std.random;
import std.uuid;
import std.array;
import std.conv : to;
import std.net.curl;

/**
 * OAuth2 implementation for D.
 * Read the comment for this(), it's important.
 */
class OAuth
{
	private OAuthProvider provider;

	/**
	 * OAuth is stateful. Therefore you must be careful
	 * about exactly which OAuthProvider you put in here.
	 *   When the user first initiates the OAuth transaction,
	 * just insert the appropriate provider as defined in
	 * providers.d.
	 *   When the user is coming back from the provider,
	 * you must insert the same object into this constructor
	 * in order to mantain state. OAuthProvider supplies the
	 * handy persist() and defrost() methods which enables
	 * you to save the objects somewhere.
	 */
	this(ref OAuthProvider p)
	in {
		assert(p.auth_endpoint != null);
		assert(p.client_id != null);
		assert(p.client_secret != null);
		assert(p.token_endpoint != null);
		assert(p.redirect_uri != null);

	} body {
		provider = p;

		if(provider.token_state is null)
			createStateToken();
	}

	/**
	 * Generate a random state token and attach it to the provider.
	 */
	private string createStateToken() {
		auto uuid = randomUUID();
		string token = uuid.toString();

		provider.token_state = token;
		return token;
	}

	/**
	 * Generate the post data for a access token request.
	 */
	private string generateAccessTokenRequestData(string code) {
		return join([
		         "code=",
		         code,
		         "&client_id=",
		         provider.client_id,
		         "&client_secret=",
		         provider.client_secret,
		         "&redirect_url=",
		         provider.redirect_uri,
		         "&grant_type=authorization_code"
		         ]);
	}

	/**
	 * STEP 1:
	 * Redirect the user to the URL generated by the following method.
	 * Saves the generated tokens to the sessionhandler.
	 */
	public string getAuthenticationRequestURL(OAuthSessionHandler handler) {
		string url = "%s?client_id=%s&response_type=code&scope=openid%20email&redirect_uri=%S&state=%s";
		
		url = join([
		            provider.auth_endpoint,
		            "?client_id=",
		            provider.client_id,
		            "&response_type=code&scope=openid%20email&redirect_uri=",
		            provider.redirect_uri,
		            "&state=",
		            provider.token_state]);


		provider.persist(handler);

		return url;

	}

	/**
	 * STEP 2:
	 * Confirm response and request access token.
	 */
	public void handleAuthenticationResponse(string url) {
		string[string] params = parseUrlForParams(url);

		string state = params["state"];
		string code = params["code"];

		if(state != provider.token_state)
			throw new Exception("Illegal token");

		string post_data = generateAccessTokenRequestData(code);

		string response = "d";//cast(string) post(provider.token_endpoint, post_data);
		debug writeln(response);



	}


}



unittest {

	import source.providers;
	
	const CLIENT_ID = "129710706774.apps.googleusercontent.com";
	const CLIENT_SECRET = "FUm-wHtdPg8Nl6FbLYlzkAS9";
	const REDIRECT = "http://localhost/oauth";
	
	OAuthProvider google = ProviderPresets.googleProvider(CLIENT_ID, CLIENT_SECRET, REDIRECT);
	OAuth auth = new OAuth(google);

	MemorySessionHandler handler = new MemorySessionHandler;
	string url = auth.getAuthenticationRequestURL(handler);
	writeln(url);

	/** The code must be entered manually */
	writeln("Enter the url redirected to");
	char[] buf;
	stdin.readln(buf);

	writeln(buf);
	
}
	

	
		