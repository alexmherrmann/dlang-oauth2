module source.oauth;

import source.oauth_utils;
import std.digest.md;
import std.random;
import std.uuid;
import std.net.curl;
import std.array;
import std.conv : to;

class Oauth
{
	private OAuthProvider provider;

	this(ref OAuthProvider p)
	in {
		assert(p.auth_endpoint != null);
		assert(p.client_id != null);
		assert(p.client_secret != null);
		assert(p.token_endpoint != null);
		assert(p.redirect_uri != null);

	} body {
		provider = p;

		if(provider.token_state is null)
			createStateToken();
	}

	/**
	 * Generate a random state token and attach it to the provider.
	 */
	private string createStateToken() {
		auto uuid = randomUUID();
		string token = toHexString(md5Of(uuid.data));

		provider.token_state = token;
		return token;
	}

	/**
	 * Generate the post data for a access token request.
	 */
	private string generateAccessTokenRequestData(string code) {
		return join([
		         "code=",
		         code,
		         "&client_id=",
		         provider.client_id,
		         "&client_secret=",
		         provider.client_secret,
		         "&redirect_url=",
		         provider.redirect_uri,
		         "&grant_type=authorization_code"
		         ]);
	}

	/**
	 * STEP 1:
	 * Redirect the user to the URL generated by the following method.
	 */
	public string getAuthenticationRequestURL() {
		//string url = "https://accounts.google.com/o/oauth2/auth?client_id=424911365001.apps.googleusercontent.com&response_type=code&scope=openid%20email&redirect_uri=https://oa2cb.example.com/&state=security_token%3D138r5719ru3e1%26url%3Dhttps://oa2cb.example.com/myHome";
		string url = "%s?client_id=%s&response_type=code&scope=openid%20email&redirect_uri=%S&state=%s";
		
		url = url.format(
			provider.auth_endpoint,
			provider.client_id,
			provider.redirect_uri);

		return url;
	}

	/**
	 * STEP 2:
	 * Confirm response and request access token.
	 */
	public void handleAuthenticationResponse(string url) {
		string[string] params = parseUrlForParams(url);

		string state = params["state"];
		string code = params["code"];

		if(state != provider.token_state)
			throw new Exception("Illegal token");

		string post_data = generateAccessTokenRequestData(code);

		string response = post(provider.token_endpoint, post_data);
		debug writeln(response);

	}


}

	

	
		